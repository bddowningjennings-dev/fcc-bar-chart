{"version":3,"sources":["helpers/graph.js","components/Graph/Graph.jsx","App.js","serviceWorker.js","index.js"],"names":["setupGraph","data","size","_size$height","height","_size$width","width","barWidth","length","xMin","min","d","Date","xMax","max","yMax","graph","select","container","attr","xScale","scaleTime","domain","range","yScale","scaleLinear","xAxis","axisBottom","yAxis","axisLeft","tooltip","append","concat","call","selectAll","enter","on","i","transition","duration","style","html","Graph","state","options","method","url","axios","console","log","this","setState","Object","objectSpread","props","setGraphData","react_default","a","createElement","className","id","Component","App","components_Graph_Graph","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3b116cc3.chunk.js","sourcesContent":["\nimport { select, max, min, scaleLinear, scaleTime } from 'd3'\nimport { axisBottom, axisLeft } from 'd3'\n\nconst setupGraph = (data, size) => {\n  // console.log(data, size)\n  const { height = 500, width = 750 } = size\n  const margin = 60\n  const barCount = data.length\n  const barWidth = width / barCount\n\n  const xMin = min(data, d => new Date(d[0]))\n  const xMax = max(data, d => new Date(d[0]))\n  const yMax = max(data, d => d[1])\n  \n  const graph = select('svg')\n  const container = select('.Graph')\n\n  graph.attr('class', 'main-graph')\n    .attr('width', width )\n    .attr('height', height)\n\n  const xScale = scaleTime().domain([ xMin, xMax ]).range([ margin, width - margin ])\n  const yScale = scaleLinear().domain([ 0, yMax ]).range([ height - margin, margin ])\n  // const yScale = scaleLinear().domain([ 0, yMax ]).range([ 0, height ])\n\n  const xAxis = axisBottom(xScale)\n  const yAxis = axisLeft(yScale)\n\n  const tooltip = container.append(\"div\")\n  .attr(\"id\", \"tooltip\")\n  // .style(\"opacity\", 0)\n\n// var overlay = container.append('div')\n//   .attr('class', 'overlay')\n//   .style('opacity', 0)\n\n  graph.append('g')\n        .attr('id', 'x-axis')\n        .attr('transform', `translate(${0}, ${height - margin})`)\n        .call(xAxis)\n                  \n  graph.append('g')\n        .attr('id', 'y-axis')\n        .attr('transform', `translate(${margin}, ${0})`)\n        .call(yAxis)\n\n  graph.selectAll('rect')\n    .data(data)\n    .enter()\n    .append('rect')\n    .attr('x', d => xScale(new Date(d[0])))\n    .attr('y', d => yScale(d[1]))\n    .attr('width', barWidth)\n    .attr('height', d => height - margin- yScale(d[1]))\n    .attr('class', 'bar')\n    .attr('data-date', d => d[0])\n    .attr('data-gdp', d => d[1])\n    .on('mouseover', (d, i) => {\n      tooltip\n      .transition()\n      .duration(200)\n      // .attr('class', 'visible')\n        .style('opacity', .7)\n\n      tooltip.html(' Billion')\n      .attr('data-date', d[0])\n      .style('left', (i * barWidth) + 30 + 'px')\n      .style('top', height - 100 + 'px')\n      .style('transform', 'translateX(60px)');\n\n    })\n    .on('mouseout', () => {\n      tooltip\n      .transition()\n      .duration(200)\n      // .attr('class', 'invisible')\n      .style('opacity', 0)\n    })\n}\n\nexport default setupGraph\n","import React, { Component } from 'react'\nimport axios from 'axios'\n\nimport './Graph.css'\n\nimport setGraphData from '../../helpers/graph'\n\nclass Graph extends Component {\n  state = { data: [] }\n  async componentDidMount() {\n    const options = {\n      method: 'GET',\n      url: 'https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/GDP-data.json',\n    }\n    const { data } = await axios(options)\n    console.log(data)\n    this.setState({ data })\n  }\n  render() {\n    const { data } = { ...this.state }\n    const { size } = { ...this.props }\n    console.log(size)\n    if (data.data && data.data.length > 0) setGraphData(data.data, size)\n    return (\n      <div className='Graph'>\n        <h2 id='title'>Title</h2>\n        <svg></svg>\n      </div>\n    )\n  }\n}\n\nexport default Graph","import React, { Component } from 'react'\nimport './App.css'\nimport Graph from './components/Graph/Graph'\nconst size = {\n  height: 500,\n  width: 750,\n}\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Graph size={size} />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}